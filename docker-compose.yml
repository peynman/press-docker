version: '3.4'

networks:
    backend_local:
        driver: bridge
    frontend_local:
        driver: bridge
    backend:
        external:
            name: backend
    frontend:
        external:
            name: frontend

services:
    ### DATABASE ####
    mariadb:
        image: ${SWARM_REGISTERY}/mariadb:latest
        build:
            context: ./mariadb
            args:
                - MARIADB_VERSION=${MARIADB_VERSION}
                - MARIADB_RUNTIME_MODE=${APP_RUNTIME_MODE}
        environment:
            - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
            - MYSQL_ALLOW_EMPTY_PASSWORD=no
            - MARIADB_DB1_NAME=${MARIADB_DB1_NAME}
            - MARIADB_DB1_USER=${MARIADB_DB1_USER}
            - MARIADB_DB1_PASS=${MARIADB_DB1_PASS}
        volumes:
            - ${LOGS_PATH}/mariadb:/var/log/mysql
            - ${DATA_PATH}/mariadb:/var/lib/mysql
        networks:
            - ${BACKEND_NETWORK}
        restart: unless-stopped
        deploy:
            mode: global
            placement:
              constraints:
                  - node.labels.region == ir

    ### REDIS ######
    redis:
        image: ${SWARM_REGISTERY}/redis:latest
        build:
            context: ./redis
            args:
                - REDIS_VERSION=${REDIS_VERSION}
                - REDIS_BIND=${REDIS_BIND}
                - REDIS_PASSWORD=${REDIS_PASSWORD}
                - REDIS_LOGFILE=${REDIS_LOGFILE}
                - REDIS_RUNTIME_MODE=${APP_RUNTIME_MODE}
        sysctls:
            - net.core.somaxconn=512
        volumes:
            - ${DATA_PATH}/redis:/data
            - ${LOGS_PATH}/redis:/var/log/redis
        networks:
            - ${BACKEND_NETWORK}
        restart: unless-stopped
        deploy:
            mode: global
            placement:
              constraints:
                  - node.labels.region == ir

    ### TELEGRAF ###
    telegraf:
      image: ${SWARM_REGISTERY}/telegraf:latest
      build:
        context: ./telegraf
        args:
          - TELEGRAF_INFLUXDB_SCHEMA=${TELEGRAF_INFLUXDB_SCHEMA}
          - TELEGRAF_INFLUXDB_HOST=${TELEGRAF_INFLUXDB_HOST}
          - TELEGRAF_INFLUXDB_PORT=${TELEGRAF_INFLUXDB_PORT}
          - TELEGRAF_INFLUXDB_ORG=${TELEGRAF_INFLUXDB_ORG}
          - TELEGRAF_INFLUXDB_BUCKET=${TELEGRAF_INFLUXDB_BUCKET}
          - TELEGRAF_INFLUXDB_TOKEN=${TELEGRAF_INFLUXDB_TOKEN}
          - TELEGRAF_PHP_FPM_PORT=${TELEGRAF_PHP_FPM_PORT}
      volumes:
          - /var/run/docker.sock:/var/run/docker.sock
      networks:
          - ${BACKEND_NETWORK}
      restart: unless-stopped
      deploy:
          mode: global
          placement:
            constraints:
                - node.labels.region == ir

      ### INFLUXDB ###
    influxdb:
      image: ${SWARM_REGISTERY}/influxdb:latest
      build:
          context: ./influxdb
      environment:
          INFLUXDB_DB: ${INFLUXDB_DB}
          INFLUXDB_HTTP_AUTH_ENABLED: "true"
          INFLUXDB_USER: ${INFLUXDB_USER}
          INFLUXDB_USER_PASSWORD: ${INFLUXDB_PASS}
      volumes:
          - ${DATA_PATH}/influxdb:/root/.influxdbv2
          - ${LOGS_PATH}/influxdb:/var/log/influxdbv2
      restart: unless-stopped
      networks:
          - ${BACKEND_NETWORK}
      ports:
          - target: 9999
            published: 8087
            mode: host
      labels:
        - "traefik.enable=true"
        - "traefik.http.middlewares.influxdb-stripprefixes.stripprefix.prefixes=/influxdb"
        ## http
        - "traefik.http.routers.influxdb.rule=PathPrefix(`/`)"
        - "traefik.http.routers.influxdb.entrypoints=influxdb"
        - "traefik.http.routers.influxdb.service=influxdb@docker"
        - "traefik.http.services.influxdb.loadbalancer.server.port=9999"
        ## https
        - "traefik.http.routers.influxdb-sec.rule=PathPrefix(`/`)"
        - "traefik.http.routers.influxdb-sec.entrypoints=influxdb"
        - "traefik.http.routers.influxdb-sec.tls=true"
        - "traefik.http.routers.influxdb-sec.service=influxdb@docker"
      deploy:
          mode: global
          placement:
            constraints:
                - node.labels.region == admin
          labels:
            - "traefik.enable=true"
            - "traefik.http.middlewares.influxdb-stripprefixes.stripprefix.prefixes=/influxdb"
            ## http
            - "traefik.http.routers.influxdb.rule=PathPrefix(`/`)"
            - "traefik.http.routers.influxdb.entrypoints=influxdb"
            - "traefik.http.routers.influxdb.service=influxdb@docker"
            - "traefik.http.services.influxdb.loadbalancer.server.port=9999"
            - "traefik.http.routers.influxdb.middlewares=influxdb-stripprefixes"
            ## https
            - "traefik.http.routers.influxdb-sec.rule=PathPrefix(`/`)"
            - "traefik.http.routers.influxdb-sec.entrypoints=influxdb"
            - "traefik.http.routers.influxdb-sec.tls=true"
            - "traefik.http.routers.influxdb-sec.service=influxdb@docker"
            - "traefik.http.routers.influxdb-sec.middlewares=streaming-stripprefixes"

    ### TRAEFIK ###
    traefik:
      image: ${SWARM_REGISTERY}/traefik:latest
      build:
          context: ./traefik
          args:
              - TRAEFIK_VERSION=${TRAEFIK_VERSION}
              - TRAEFIK_ENABLE_DASHBOARD=${TRAEFIK_ENABLE_DASHBOARD}
              - TRAEFIK_INFLUXDB_URL=${TRAEFIK_INFLUXDB_URL}
              - TRAEFIK_INFLUXDB_DB=${TRAEFIK_INFLUXDB_DB}
              - TRAEFIK_INFLUXDB_USER=${TRAEFIK_INFLUXDB_USER}
              - TRAEFIK_INFLUXDB_PASS=${TRAEFIK_INFLUXDB_PASS}
              - TRAEFIK_ACME_URL=${TRAEFIK_ACME_URL}
              - TRAEFIK_DEBUG_MODE=${TRAEFIK_DEBUG_MODE}
              - TRAEFIK_LOG_LEVEL=${TRAEFIK_LOG_LEVEL}
              - TRAEFIK_DEV_CERT_FILE=${TRAEFIK_DEV_CERT_FILE}
              - TRAEFIK_DEV_CERT_KEY=${TRAEFIK_DEV_CERT_KEY}
      environment:
        - TRAEFIK_MARIADB_DOMAINS_DB=${MARIADB_DB1_NAME}
        - TRAEFIK_MARIADB_DOMAINS_USER=${MARIADB_DB1_USER}
        - TRAEFIK_MARIADB_DOMAINS_PASS=${MARIADB_DB1_PASS}
      volumes:
          - ${LOGS_PATH}/traefik:/var/log/traefik
          - ${DATA_PATH}/traefik/letsencrypt:/letsencrypt
          - /var/run/docker.sock:/var/run/docker.sock
          - ./traefik/configs:/file-providers
          - ./traefik/certs:/certs
      networks:
          - ${FRONTEND_NETWORK}
          - ${BACKEND_NETWORK}
      ports:
          - target: 80
            published: ${TRAEFIK_WEB_PORT}
            mode: host
          - target: 443
            published: ${TRAEFIK_WEB_SECURED_PORT}
            mode: host
          - target: 8086
            published: ${TRAEFIK_DASHBOARD_PORT}
            mode: host
          - target: 1935
            published: 1935
            protocol: tcp
            mode: host
          - target: ${ECHO_PORT}
            published: ${ECHO_PORT}
            mode: host
      deploy:
          mode: global
          placement:
              constraints:
                  - node.labels.region == ir

    ### LIVESTREAM ###
    livestream:
      image: ${SWARM_REGISTERY}/livestream:latest
      build:
          context: ./livestream
          args:
            - LIVESTREAM_AUTH_HOST=${LIVESTREAM_AUTH_HOST}
      volumes:
          - ${LOGS_PATH}/livestream:/var/log/nginx/
          - ${DATA_PATH}/livestream:/opt/data/
      restart: unless-stopped
      networks:
          - ${BACKEND_NETWORK}
          - ${FRONTEND_NETWORK}
      restart: unless-stopped
      labels:
          - "traefik.enable=true"
          - "traefik.http.middlewares.streaming-stripprefixes.stripprefix.prefixes=/upstream,/livestream"
          ## rtmp upstream
          - "traefik.tcp.routers.livestream.rule=HostSNI(`*`)"
          - "traefik.tcp.routers.livestream.entrypoints=rtmp"
          - "traefik.tcp.routers.livestream.service=livestream@docker"
          - "traefik.tcp.services.livestream.loadbalancer.server.port=1935"
          ## rtmps upstream
          - "traefik.tcp.routers.livestream-sec.rule=HostSNI(`*`)"
          - "traefik.tcp.routers.livestream-sec.entrypoints=rtmp"
          - "traefik.tcp.routers.livestream-sec.service=livestream@docker"
          - "traefik.tcp.routers.livestream-sec.tls=true"
          - "traefik.tcp.services.livestream-sec.loadbalancer.server.port=1935"
          ## http hls
          - "traefik.http.routers.livestream.rule=PathPrefix(`/livestream`)"
          - "traefik.http.routers.livestream.entrypoints=web"
          - "traefik.http.routers.livestream.service=livestream@docker"
          - "traefik.http.services.livestream.loadbalancer.server.port=80"
          - "traefik.http.routers.livestream.middlewares=streaming-stripprefixes"
          ## https hls
          - "traefik.http.routers.livestream-sec.rule=PathPrefix(`/livestream`)"
          - "traefik.http.routers.livestream-sec.entrypoints=websecure"
          - "traefik.http.routers.livestream-sec.tls=true"
          - "traefik.http.routers.livestream-sec.service=livestream@docker"
          - "traefik.http.routers.livestream-sec.middlewares=streaming-stripprefixes"
      deploy:
        mode: global
        placement:
            constraints:
                - node.labels.region == ir
        labels:
          - "traefik.enable=true"
          - "traefik.http.middlewares.streaming-stripprefixes.stripprefix.prefixes=/upstream,/livestream"
          ## http upstream
          - "traefik.tcp.routers.upstream.rule=HostRegex(`.*`)"
          - "traefik.tcp.routers.upstream.entrypoints=upstream"
          - "traefik.tcp.routers.upstream.service=livestream@docker"
          - "traefik.tcp.services.upstream.loadbalancer.server.port=1935"
          ## http hls
          - "traefik.http.routers.livestream.rule=PathPrefix(`/livestream`)"
          - "traefik.http.routers.livestream.entrypoints=web"
          - "traefik.http.routers.livestream.service=livestream@docker"
          - "traefik.http.services.livestream.loadbalancer.server.port=80"
          - "traefik.http.routers.livestream.middlewares=streaming-stripprefixes"
          ## https hls
          - "traefik.http.routers.livestream-sec.rule=PathPrefix(`/livestream`)"
          - "traefik.http.routers.livestream-sec.entrypoints=websecure"
          - "traefik.http.routers.livestream-sec.tls=true"
          - "traefik.http.routers.livestream-sec.service=livestream@docker"
          - "traefik.http.routers.livestream-sec.middlewares=streaming-stripprefixes"

    ### APACHE2 ######
    apache2:
      image: ${SWARM_REGISTERY}/apache2:latest
      build: ./apache2
      environment:
          - WEB_PHP_SOCKET=${APACHE2_PHP_UPSTREAM_CONTAINER}:${APACHE2_PHP_UPSTREAM_PORT}
          - WEB_PHP_TIMEOUT=${APACHE2_PHP_UPSTREAM_TIMEOUT}
          - WEB_ROOT=${APACHE2_DOCUMENT_ROOT}
          - APACHE_RUNTIME_MODE=${APP_RUNTIME_MODE}
      volumes:
          - ${LOGS_PATH}/apache2:/var/log/apache2
          - ${MEDIA_PATH}:/var/media
          - ${APACHE2_APP_PATH}:/var/www
      networks:
          - ${BACKEND_NETWORK}
          - ${FRONTEND_NETWORK}
      restart: unless-stopped
      labels:
        - "traefik.enable=true"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        # http for dev
        - "traefik.http.routers.apache2.rule=PathPrefix(`/`)"
        - "traefik.http.routers.apache2.entrypoints=web"
        - "traefik.http.routers.apache2.service=apache2@docker"
        - "traefik.http.services.apache2.loadbalancer.server.port=80"
        - "traefik.http.routers.apache2.middlewares=redirect-to-https"
        # https for dev
        - "traefik.http.routers.apache2-sec.rule=PathPrefix(`/`)"
        - "traefik.http.routers.apache2-sec.tls=true"
        - "traefik.http.routers.apache2-sec.service=apache2@docker"
        - "traefik.http.routers.apache2-sec.entrypoints=websecure"
        - "traefik.http.services.apache2-sec.loadbalancer.server.port=80"
      deploy:
          mode: replicated
          replicas: 5
          placement:
            constraints:
                - node.labels.region == ir
          labels:
            - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
            - "traefik.enable=true"
            - "traefik.http.routers.apache2.rule=PathPrefix(`/`)"
            - "traefik.http.routers.apache2.entrypoints=web"
            - "traefik.http.services.apache2.loadbalancer.server.port=80"
            - "traefik.http.routers.apache2.middlewares=redirect-to-https"
              ## web secutre for apache instance comes from bash script in traefik container
                ## it generates a file that traefik is watching from mariadb "domains and sub_domains" table

    ### LARAVEL ECHO ###
    laravel-echo:
      image: ${SWARM_REGISTERY}/laravel-echo:latest
      build:
          context: ./laravel-echo
          args:
            - ECHO_AUTH_HOST=${ECHO_AUTH_HOST}
            - ECHO_AUTH_PATH=${ECHO_AUTH_PATH}
            - ECHO_NODE_VERSION=${ECHO_NODE_VERSION}
            - ECHO_PORT=${ECHO_PORT}
            - ECHO_PROTOCOL=${ECHO_PROTOCOL}
            - ECHO_SSL_CERTPATH=${ECHO_SSL_CERTPATH}
            - ECHO_SSL_KEYPATH=${ECHO_SSL_KEYPATH}
            - ECHO_SSL_CERTCHAINPATH=${ECHO_SSL_CERTCHAINPATH}
            - ECHO_SSL_PASSPHRASE=${ECHO_SSL_PASSPHRASE}
            - ECHO_REDIS_PORT=${ECHO_REDIS_PORT}
            - ECHO_REDIS_HOST=${ECHO_REDIS_HOST}
            - ECHO_REDIS_PASS=${ECHO_REDIS_PASS}
            - ECHO_REDIS_DB=${ECHO_REDIS_DB}
            - ECHO_RUNTIME_MODE=${APP_RUNTIME_MODE}
            - ECHO_CLIENT_APP_ID=${ECHO_CLIENT_APP_ID}
            - ECHO_CLIENT_APP_KEY=${ECHO_CLIENT_APP_KEY}
      networks:
        - ${BACKEND_NETWORK}
        - ${FRONTEND_NETWORK}
      labels:
        - "traefik.enable=true"
        - "traefik.http.middlewares.echo-stripprefixes.stripprefix.prefixes=/echo"
        # tls echo
        - "traefik.http.routers.echo.rule=PathPrefix(`/`)"
        - "traefik.http.routers.echo.entrypoints=socketio"
        - "traefik.http.routers.echo.service=echo@docker"
        - "traefik.http.routers.echo.tls=true"
        - "traefik.http.services.echo.loadbalancer.server.port=8088"
        # no tls echo
        - "traefik.http.routers.echo-nt.rule=PathPrefix(`/`)"
        - "traefik.http.routers.echo-nt.entrypoints=socketio"
        - "traefik.http.routers.echo-nt.service=echo@docker"
        # http echo
        - "traefik.http.routers.echo-web.rule=PathPrefix(`/echo`)"
        - "traefik.http.routers.echo-web.entrypoints=web"
        - "traefik.http.routers.echo-web.middlewares=echo-stripprefixes"
        - "traefik.http.routers.echo-web.service=echo@docker"
        # https echo
        - "traefik.http.routers.echo-sec.rule=PathPrefix(`/echo`)"
        - "traefik.http.routers.echo-sec.entrypoints=websecure"
        - "traefik.http.routers.echo-sec.tls=true"
        - "traefik.http.routers.echo-sec.middlewares=echo-stripprefixes"
        - "traefik.http.routers.echo-sec.service=echo@docker"
      deploy:
        mode: replicated
        replicas: 1
        placement:
          constraints:
              - node.labels.region == ir
        labels:
          - "traefik.enable=true"
          - "traefik.http.middlewares.echo-stripprefixes.stripprefix.prefixes=/echo"
          # tls echo
          - "traefik.http.routers.echo.rule=PathPrefix(`/`)"
          - "traefik.http.routers.echo.entrypoints=socketio"
          - "traefik.http.routers.echo.service=echo@docker"
          - "traefik.http.routers.echo.tls=true"
          - "traefik.http.services.echo.loadbalancer.server.port=8088"
          # no tls echo
          - "traefik.http.routers.echo-nt.rule=PathPrefix(`/`)"
          - "traefik.http.routers.echo-nt.entrypoints=socketio"
          - "traefik.http.routers.echo-nt.service=echo@docker"
          # http echo
          - "traefik.http.routers.echo-web.rule=PathPrefix(`/echo`)"
          - "traefik.http.routers.echo-web.entrypoints=web"
          - "traefik.http.routers.echo-web.middlewares=echo-stripprefixes"
          - "traefik.http.routers.echo-web.service=echo@docker"
          # https echo
          - "traefik.http.routers.echo-sec.rule=PathPrefix(`/echo`)"
          - "traefik.http.routers.echo-sec.entrypoints=websecure"
          - "traefik.http.routers.echo-sec.tls=true"
          - "traefik.http.routers.echo-sec.middlewares=echo-stripprefixes"
          - "traefik.http.routers.echo-sec.service=echo@docker"

    ### PHP-FPM ######
    php-fpm:
      image: ${SWARM_REGISTERY}/php-fpm:latest
      build:
          context: ./php-fpm
          args:
              - PHP_VERSION=${PHP_VERSION}
              - PHP_TIMEZONE=${PHP_TIMEZONE}
              - PHP_BASH=${PHP_BASH}
              - PHP_FPM_RUNTIME_MODE=${APP_RUNTIME_MODE}
              - PHP_INSTALL_REDIS=${PHP_INSTALL_REDIS}
              - PHP_INSTALL_XDEBUG=${PHP_INSTALL_XDEBUG}
              - PHP_INSTALL_GD=${PHP_INSTALL_GD}
              - PHP_INSTALL_MYSQL=${PHP_INSTALL_MYSQL}
              - PHP_INSTALL_INTL=${PHP_INSTALL_INTL}
              - PHP_INSTALL_AMQLIB=${PHP_INSTALL_AMQLIB}
              - PHP_INSTALL_PCNTL=${PHP_INSTALL_PCNTL}
              - PHP_INSTALL_COMPOSER=${PHP_INSTALL_COMPOSER}
              - PHP_INSTALL_BCMATH=${PHP_INSTALL_BCMATH}
              - PHP_INSTALL_ZIP=${PHP_INSTALL_ZIP}
              - PHP_INSTALL_SOAP=${PHP_INSTALL_SOAP}
      volumes:
          - ${LOGS_PATH}/php-fpm:/var/log/php-fpm
          - ${MEDIA_PATH}:/var/media
          - ${APACHE2_APP_PATH}:/var/www
      networks:
          - ${BACKEND_NETWORK}
      restart: unless-stopped
      deploy:
          mode: replicated
          replicas: 5
          placement:
            constraints:
                - node.labels.region == ir

    ### laravel-horizon ######
    laravel-horizon:
      image: ${SWARM_REGISTERY}/laravel-horizon:latest
      build:
          context: ./laravel-horizon
          args:
              - PHP_VERSION=${PHP_VERSION}
              - PHP_TIMEZONE=${PHP_TIMEZONE}
              - PHP_BASH=${PHP_BASH}
              - PHP_FPM_RUNTIME_MODE=${APP_RUNTIME_MODE}
              - PHP_INSTALL_REDIS=${PHP_INSTALL_REDIS}
              - PHP_INSTALL_XDEBUG=${PHP_INSTALL_XDEBUG}
              - PHP_INSTALL_GD=${PHP_INSTALL_GD}
              - PHP_INSTALL_MYSQL=${PHP_INSTALL_MYSQL}
              - PHP_INSTALL_INTL=${PHP_INSTALL_INTL}
              - PHP_INSTALL_AMQLIB=${PHP_INSTALL_AMQLIB}
              - PHP_INSTALL_PCNTL=${PHP_INSTALL_PCNTL}
              - PHP_INSTALL_COMPOSER=${PHP_INSTALL_COMPOSER}
              - PHP_INSTALL_BCMATH=${PHP_INSTALL_BCMATH}
              - PHP_INSTALL_ZIP=${PHP_INSTALL_ZIP}
              - PHP_INSTALL_SOAP=${PHP_INSTALL_SOAP}
      volumes:
          - ${LOGS_PATH}/horizon:/var/log/php
          - ${MEDIA_PATH}:/var/media
          - ${APACHE2_APP_PATH}:/var/www
      networks:
        - ${BACKEND_NETWORK}
      deploy:
        mode: replicated
        replicas: 1
        placement:
          constraints:
              - node.labels.region == ir

    ### laravel-scheduler ######
    laravel-scheduler:
      image: ${SWARM_REGISTERY}/laravel-scheduler:latest
      build:
          context: ./laravel-scheduler
          args:
              - PHP_VERSION=${PHP_VERSION}
              - PHP_TIMEZONE=${PHP_TIMEZONE}
              - PHP_BASH=${PHP_BASH}
              - PHP_FPM_RUNTIME_MODE=${APP_RUNTIME_MODE}
              - PHP_INSTALL_REDIS=${PHP_INSTALL_REDIS}
              - PHP_INSTALL_XDEBUG=${PHP_INSTALL_XDEBUG}
              - PHP_INSTALL_GD=${PHP_INSTALL_GD}
              - PHP_INSTALL_MYSQL=${PHP_INSTALL_MYSQL}
              - PHP_INSTALL_INTL=${PHP_INSTALL_INTL}
              - PHP_INSTALL_AMQLIB=${PHP_INSTALL_AMQLIB}
              - PHP_INSTALL_PCNTL=${PHP_INSTALL_PCNTL}
              - PHP_INSTALL_COMPOSER=${PHP_INSTALL_COMPOSER}
              - PHP_INSTALL_BCMATH=${PHP_INSTALL_BCMATH}
              - PHP_INSTALL_ZIP=${PHP_INSTALL_ZIP}
              - PHP_INSTALL_SOAP=${PHP_INSTALL_SOAP}
      volumes:
          - ${MEDIA_PATH}:/var/media
          - ${APACHE2_APP_PATH}:/var/www
      networks:
        - ${BACKEND_NETWORK}
      deploy:
        mode: replicated
        replicas: 1
        placement:
          constraints:
              - node.labels.region == ir

    ### PHPMYADMIN ###
    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        environment:
            - PMA_ARBITRARY=1
        ports:
            - "${PHP_MYADMIN_PORT}:80"
        networks:
            - ${BACKEND_NETWORK}
        deploy:
            mode: replicated
            replicas: 0
            placement:
              constraints:
                  - node.labels.region == admin

    ### REV SLIDER ###
    ### REV SLIDER APACHE2 ####
    revslider-apache2:
      image: ${SWARM_REGISTERY}/revslider-apache2:latest
      build: ./revslider/docker/apache2
      environment:
          - WEB_PHP_SOCKET=${REVSLIDER_APACHE2_PHP_UPSTREAM_CONTAINER}:${REVSLIDER_APACHE2_PHP_UPSTREAM_PORT}
          - WEB_PHP_TIMEOUT=${REVSLIDER_APACHE2_PHP_UPSTREAM_TIMEOUT}
          - WEB_ROOT=${REVSLIDER_APACHE2_DOCUMENT_ROOT}
          - APACHE_RUNTIME_MODE=${APP_RUNTIME_MODE}
      volumes:
          - ${LOGS_PATH}/revslider-apache2:/var/log/apache2
          - ${MEDIA_PATH}:/var/media
          - ${REVSLIDER_APACHE2_APP_PATH}:/var/www
      networks:
          - ${BACKEND_NETWORK}
          - ${FRONTEND_NETWORK}
      restart: unless-stopped
      labels:
        - "traefik.http.middlewares.revslider-stripprefixes.stripprefix.prefixes=/revslider"
        - "traefik.enable=true"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        # http for dev
        - "traefik.http.routers.revslider-apache2.rule=PathPrefix(`/revslider`)"
        - "traefik.http.routers.revslider-apache2.entrypoints=web"
        - "traefik.http.routers.revslider-apache2.service=revslider-apache2@docker"
        - "traefik.http.services.revslider-apache2.loadbalancer.server.port=80"
        - "traefik.http.routers.revslider-apache2.middlewares=revslider-stripprefixes"
        - "traefik.http.routers.revslider-apache2.middlewares=redirect-to-https"
        # https for dev
        - "traefik.http.routers.revslider-apache2-sec.rule=PathPrefix(`/revslider`)"
        - "traefik.http.routers.revslider-apache2-sec.tls=true"
        - "traefik.http.routers.revslider-apache2-sec.service=revslider-apache2@docker"
        - "traefik.http.routers.revslider-apache2-sec.entrypoints=websecure"
        - "traefik.http.routers.revslider-apache2-sec.middlewares=revslider-stripprefixes"
      deploy:
        mode: replicated
        replicas: 1
        placement:
          constraints:
              - node.labels.region == ir
        labels:
          - "traefik.http.middlewares.revslider-stripprefixes.stripprefix.prefixes=/revslider"
          - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
          - "traefik.enable=true"
          ## http
          - "traefik.http.routers.revslider-apache2.rule=PathPrefix(`/revslider`)"
          - "traefik.http.routers.revslider-apache2.entrypoints=web"
          - "traefik.http.services.revslider-apache2.loadbalancer.server.port=80"
          - "traefik.http.routers.revslider-apache2.middlewares=redirect-to-https"
          - "traefik.http.routers.revslider-apache2.middlewares=revslider-stripprefixes"
          ## https
          - "traefik.http.routers.revslider-apache2-sec.rule=PathPrefix(`/revslider`)"
          - "traefik.http.routers.revslider-apache2-sec.tls=true"
          - "traefik.http.routers.revslider-apache2-sec.entrypoints=websecure"
          - "traefik.http.routers.revslider-apache2-sec.service=revslider-apache2@docker"
          - "traefik.http.services.revslider-apache2-sec.loadbalancer.server.port=80"
          - "traefik.http.routers.revslider-apache2-sec.middlewares=revslider-stripprefixes"

    ### REV SLIDER PHP-FPM ######
    revslider-php-fpm:
      image: ${SWARM_REGISTERY}/revslider-php-fpm:latest
      build:
          context: ./revslider/docker/php-fpm
          args:
              - PHP_VERSION=7.1
              - PHP_TIMEZONE=${PHP_TIMEZONE}
              - PHP_BASH=${PHP_BASH}
              - PHP_FPM_RUNTIME_MODE=${APP_RUNTIME_MODE}
              - PHP_INSTALL_REDIS=${PHP_INSTALL_REDIS}
              - PHP_INSTALL_XDEBUG=${PHP_INSTALL_XDEBUG}
              - PHP_INSTALL_GD=${PHP_INSTALL_GD}
              - PHP_INSTALL_MYSQL=${PHP_INSTALL_MYSQL}
              - PHP_INSTALL_INTL=${PHP_INSTALL_INTL}
              - PHP_INSTALL_AMQLIB=${PHP_INSTALL_AMQLIB}
              - PHP_INSTALL_PCNTL=${PHP_INSTALL_PCNTL}
              - PHP_INSTALL_COMPOSER=${PHP_INSTALL_COMPOSER}
              - PHP_INSTALL_BCMATH=${PHP_INSTALL_BCMATH}
              - PHP_INSTALL_ZIP=${PHP_INSTALL_ZIP}
              - PHP_INSTALL_SOAP=${PHP_INSTALL_SOAP}
      volumes:
          - ${LOGS_PATH}/revslider-php-fpm:/var/log/php-fpm
          - ${MEDIA_PATH}:/var/media
          - ${REVSLIDER_APACHE2_APP_PATH}:/var/www
      networks:
          - ${BACKEND_NETWORK}
      restart: unless-stopped
      deploy:
          mode: replicated
          replicas: 1
          placement:
            constraints:
                - node.labels.region == ir
